{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Seaweed Scale-Up Model Installation To install the Seaweed Scale-Up Model package, we recommend setting up a virtual environment. This will ensure that the package and its dependencies are isolated from other projects on your machine, which can prevent conflicts and make it easier to manage your dependencies. Here are the steps to follow: Create a virtual environment using either conda by running the command conda env create -f environment.yml . This will create an environment called \"seaweed_scale_up_model\". A virtual environment is like a separate Python environment, which you can think of as a separate \"room\" for your project to live in, it's own space which is isolated from the rest of the system, and it will have it's own set of packages and dependencies, that way you can work on different projects with different versions of packages without interfering with each other. Activate the environment by running conda activate seaweed_scale_up_model . This command will make the virtual environment you just created the active one, so that when you run any python command or install any package, it will do it within the environment. Install the package by running pip install -e . in the main folder of the repository. This command will install the package you are currently in as a editable package, so that when you make changes to the package, you don't have to reinstall it again. If you want to run the example Jupyter notebook, you'll need to create a kernel for the environment. First, install the necessary tools by running conda install -c anaconda ipykernel . This command will install the necessary tools to create a kernel for the Jupyter notebook. A kernel is a component of Jupyter notebook that allows you to run your code. It communicates with the notebook web application and the notebook document format to execute code and display the results. Then, create the kernel by running python -m ipykernel install --user --name=seaweed_scale_up_model . This command will create a kernel with the name you specified \"seaweed_scale_up_model\" , which you can use to run the example notebook or play around with the model yourself. You can now use the kernel \"seaweed_scale_up_model\" to run the example notebook or play around with the model yourself. If you are using the kernel and it fails due an import error for the model package, you might have to rerun: pip install -e . . If you encounter any issues, feel free to open an issue in the repository. How this model works in general This model takes the output of the seaweed growth model and simulates the scale-up of seaweed production in nuclear winter. To do so it creates a fixed amount of new seaweed farms each day it runs. If the seaweed on the existing farms has reached the threshold density, it is harvested. Once it is harvested, the yield is used to stock newly build areas with seaweed. If there are no areas to be stocked up the yield is used for consumption. Structure The code in this repository is split into three parts: The actual model The model can be found in scaleup_model.py . It has a variety of variables that can be changed to simulate different scenarios. For example, the duration of the simulation, the threshold density for harvest or how much of the yield is lost to waste. Preprocessing The preprocessing reformats the data from the seaweed growth model and saves it in this new format. Plotting Makes the plots for the publication.","title":"Home"},{"location":"#seaweed-scale-up-model","text":"","title":"Seaweed Scale-Up Model"},{"location":"#installation","text":"To install the Seaweed Scale-Up Model package, we recommend setting up a virtual environment. This will ensure that the package and its dependencies are isolated from other projects on your machine, which can prevent conflicts and make it easier to manage your dependencies. Here are the steps to follow: Create a virtual environment using either conda by running the command conda env create -f environment.yml . This will create an environment called \"seaweed_scale_up_model\". A virtual environment is like a separate Python environment, which you can think of as a separate \"room\" for your project to live in, it's own space which is isolated from the rest of the system, and it will have it's own set of packages and dependencies, that way you can work on different projects with different versions of packages without interfering with each other. Activate the environment by running conda activate seaweed_scale_up_model . This command will make the virtual environment you just created the active one, so that when you run any python command or install any package, it will do it within the environment. Install the package by running pip install -e . in the main folder of the repository. This command will install the package you are currently in as a editable package, so that when you make changes to the package, you don't have to reinstall it again. If you want to run the example Jupyter notebook, you'll need to create a kernel for the environment. First, install the necessary tools by running conda install -c anaconda ipykernel . This command will install the necessary tools to create a kernel for the Jupyter notebook. A kernel is a component of Jupyter notebook that allows you to run your code. It communicates with the notebook web application and the notebook document format to execute code and display the results. Then, create the kernel by running python -m ipykernel install --user --name=seaweed_scale_up_model . This command will create a kernel with the name you specified \"seaweed_scale_up_model\" , which you can use to run the example notebook or play around with the model yourself. You can now use the kernel \"seaweed_scale_up_model\" to run the example notebook or play around with the model yourself. If you are using the kernel and it fails due an import error for the model package, you might have to rerun: pip install -e . . If you encounter any issues, feel free to open an issue in the repository.","title":"Installation"},{"location":"#how-this-model-works-in-general","text":"This model takes the output of the seaweed growth model and simulates the scale-up of seaweed production in nuclear winter. To do so it creates a fixed amount of new seaweed farms each day it runs. If the seaweed on the existing farms has reached the threshold density, it is harvested. Once it is harvested, the yield is used to stock newly build areas with seaweed. If there are no areas to be stocked up the yield is used for consumption.","title":"How this model works in general"},{"location":"#structure","text":"The code in this repository is split into three parts:","title":"Structure"},{"location":"#the-actual-model","text":"The model can be found in scaleup_model.py . It has a variety of variables that can be changed to simulate different scenarios. For example, the duration of the simulation, the threshold density for harvest or how much of the yield is lost to waste.","title":"The actual model"},{"location":"#preprocessing","text":"The preprocessing reformats the data from the seaweed growth model and saves it in this new format.","title":"Preprocessing"},{"location":"#plotting","text":"Makes the plots for the publication.","title":"Plotting"},{"location":"modules/src/plotter/","text":"plot_satisfaction_results source .plot_satisfaction_results( clusters, percent_need, scenario, location ) Plots the results of the model Arguments cluster_df (pd.DataFrame) : The results of the model percent_need (int) : The percent of the population that needs to be satisfied scenario (str) : The scenario name Returns None, but plots and saves the results plot_scenario_comparison source .plot_scenario_comparison( percent_need, scenario_max_growth_rates_df, location ) Plots the results of the model from all scenarios and compares the cluster with the highest growth rate for a given scenario. Arguments percent_need (int) : The percent of the population that needs to be satisfied Returns None, but plots and saves the results plot_area_results source .plot_area_results( clusters, scenario, location ) Plots how much area the different growth rates need Arguments clusters (dict) : The seaweed scale up area results sorted by cluster Returns None, but plots and saves the results plot_self_shading source .plot_self_shading() Plots the self shading used in the model. Based on James and Boriah (2010). Arguments None Returns None create_plots source .create_plots( location, scenarios, consumption_aim, number_of_clusters, with__shading = False, with_comparison = True ) Main function to run the plotter and read the data Arguments location (str) : The location to plot consumption_aim (float) : The consumption aim in percent with_self_shading (bool) : Whether to plot the self shading factor with_comparison (bool) : Whether to plot the scenario comparison Returns None","title":"plotter"},{"location":"modules/src/plotter/#_1","text":"","title":""},{"location":"modules/src/plotter/#plot_satisfaction_results","text":"source .plot_satisfaction_results( clusters, percent_need, scenario, location ) Plots the results of the model Arguments cluster_df (pd.DataFrame) : The results of the model percent_need (int) : The percent of the population that needs to be satisfied scenario (str) : The scenario name Returns None, but plots and saves the results","title":"plot_satisfaction_results"},{"location":"modules/src/plotter/#plot_scenario_comparison","text":"source .plot_scenario_comparison( percent_need, scenario_max_growth_rates_df, location ) Plots the results of the model from all scenarios and compares the cluster with the highest growth rate for a given scenario. Arguments percent_need (int) : The percent of the population that needs to be satisfied Returns None, but plots and saves the results","title":"plot_scenario_comparison"},{"location":"modules/src/plotter/#plot_area_results","text":"source .plot_area_results( clusters, scenario, location ) Plots how much area the different growth rates need Arguments clusters (dict) : The seaweed scale up area results sorted by cluster Returns None, but plots and saves the results","title":"plot_area_results"},{"location":"modules/src/plotter/#plot_self_shading","text":"source .plot_self_shading() Plots the self shading used in the model. Based on James and Boriah (2010). Arguments None Returns None","title":"plot_self_shading"},{"location":"modules/src/plotter/#create_plots","text":"source .create_plots( location, scenarios, consumption_aim, number_of_clusters, with__shading = False, with_comparison = True ) Main function to run the plotter and read the data Arguments location (str) : The location to plot consumption_aim (float) : The consumption aim in percent with_self_shading (bool) : Whether to plot the self shading factor with_comparison (bool) : Whether to plot the scenario comparison Returns None","title":"create_plots"},{"location":"modules/src/preprocessing/","text":"prep_data source .prep_data( scenario, location, num_clusters, starting_month = 0, max_growth = 30 ) Changes the data from the growth model, so that it is a single time series for all the clusters. The data at this point is still in fraction of maximum growth rate and not in % per day Arguments path (str) : path to the data Returns None, only writes to a csv","title":"preprocessing"},{"location":"modules/src/preprocessing/#_1","text":"","title":""},{"location":"modules/src/preprocessing/#prep_data","text":"source .prep_data( scenario, location, num_clusters, starting_month = 0, max_growth = 30 ) Changes the data from the growth model, so that it is a single time series for all the clusters. The data at this point is still in fraction of maximum growth rate and not in % per day Arguments path (str) : path to the data Returns None, only writes to a csv","title":"prep_data"},{"location":"modules/src/scaleup_model/","text":"SeaweedScaleUpModel source SeaweedScaleUpModel( path, cluster, seaweed_need, harvest_loss ) Class that loads the data, calculates the scaleup and saves it into a csv Methods: .load_growth_timeseries source .load_growth_timeseries( path, cluster ) Loads the growth timeseries from the file Arguments path : the path to the timeseries cluster : the cluster to use Returns None .seaweed_growth source .seaweed_growth( initial_seaweed, initial_area_built, initial_area_used, new_module_area_per_day, min_density, max_density, max_area, optimal_growth_rate, growth_rate_fraction, initial_lag, percent_usable_for_growth, days_to_run, verbose = False, calibration_run = False ) Calculates the seaweed growth and creatss a dataframe of all important growth numbers Arguments initial_seaweed : The initial amount of seaweed in t initial_area_built : The initial area built in km\u00b2 initial_area_used : The initial area used in km\u00b2 new_module_area_per_day : The area built per day in km\u00b2 min_density : The minimum density in t/km\u00b2 max_density : The maximum density in t/km\u00b2 max_area : The maximum area in km\u00b2 optimal_growth_rate : The optimal growth rate in % growth_rate_fraction : The fraction of the growth rate (can either be scalar or list) initial_lag : The initial lag in days percent_usable_for_growth : The percent usable for growth in % days_to_run : The number of days to run Returns A dataframe with all important growth numbers .determine_average_productivity source .determine_average_productivity( growth_rate_fraction, days_to_run, percent_usable_for_growth, optimal_growth_rate ) Let the model run for one km\u00b2 to determine the productivity per area and day and the harvest intervall Arguments growth_rate_fraction : float or list of the growth rate of seaweed days_to_run : int, number of days to run the model percent_usable_for_growth : float, the percentage of the module area that can be used for growth optimal_growth_rate : float, the optimal growth rate of the seaweed Returns productivity : float, the average productivity per km\u00b2 and day self_shading source .self_shading( density ) Calculates how much the growth rate is reduced due to self shading. Based on the publication: Lapointe, B. E., & Ryther, J. H. (1978). Some aspects of the growth and yield of Gracilaria tikvahiae in culture. Aquaculture, 15(3), 185-193. https://doi.org/10.1016/0044-8486(78)90030-3 Arguments density : the seaweed density Returns the growth rate fraction calculate_seaweed_need source .calculate_seaweed_need( global_pop, calories_per_person_per_day, food_waste, calories_per_t_seaweed_wet, seaweed_limit ) Calculates the amount of seaweed needed to feed the population based on global population and the amount of seaweed needed per person limited by the iodine content of the seaweed Arguments global_pop (int) : Global population calories_per_person_per_day (int) : Calories needed per person per day food_waste (float) : Fraction of food wasted calories_per_kg_seaweed (int) : Calories per t of seaweed seaweed_limit (float) : how large a fraction of the food can be substituted by seaweed Returns float : amount of seaweed needed to feed the population seaweed_farm_area_per_day source .seaweed_farm_area_per_day( day ) Estimates the area that can be built per day based on how many days have passed. This is a rough estimate based on: https://github.com/allfed/Seaweed-Scaleup-Model/blob/main/scripts/Logistic%20Growth.ipynb Arguments day : the day Returns the area that can be built per day logistic_curve source .logistic_curve( x, max_L, k, x0, off ) Describes a logistic growth curve Arguments x : value to calculate max_L : maximum value of the curve k : the logistic growth rate x0 : the sigmoid's midpoint off : offset to 0 Returns float: y value corresponding to x run_model source .run_model( optimal_growth_rate, days_to_run, global_pop, calories_per_person_per_day, harvest_loss, food_waste, calories_per_t_seaweed_wet, food_limit, feed_limit, biofuel_limit, percent_usable_for_growth, scenarios, location, number_of_clusters ) Run the model Arguments optimal_growth_rate (float) : the optimal growth rate days_to_run (int) : the number of days to run the model global_pop (int) : Global population calories_per_person_per_day (int) : Calories needed per person per day harvest_loss (float) : Fraction of harvest lost food_waste (float) : Fraction of food wasted calories_per_kg_seaweed (int) : Calories per t of seaweed food_limit (float) : how large a fraction of the food can be substituted by seaweed feed_limit (float) : how large a fraction of the feed can be substituted by seaweed biofuel_limit (float) : how large a fraction of the biofuel can be substituted by seaweed percent_usable_for_growth (float) : how much of the harvest is usable for growth scenarios (list) : list of scenarios to run location (str) : location on the globe number_of_clusters (int) : number of clusters Returns None","title":"scaleup_model"},{"location":"modules/src/scaleup_model/#_1","text":"","title":""},{"location":"modules/src/scaleup_model/#seaweedscaleupmodel","text":"source SeaweedScaleUpModel( path, cluster, seaweed_need, harvest_loss ) Class that loads the data, calculates the scaleup and saves it into a csv Methods:","title":"SeaweedScaleUpModel"},{"location":"modules/src/scaleup_model/#load_growth_timeseries","text":"source .load_growth_timeseries( path, cluster ) Loads the growth timeseries from the file Arguments path : the path to the timeseries cluster : the cluster to use Returns None","title":".load_growth_timeseries"},{"location":"modules/src/scaleup_model/#seaweed_growth","text":"source .seaweed_growth( initial_seaweed, initial_area_built, initial_area_used, new_module_area_per_day, min_density, max_density, max_area, optimal_growth_rate, growth_rate_fraction, initial_lag, percent_usable_for_growth, days_to_run, verbose = False, calibration_run = False ) Calculates the seaweed growth and creatss a dataframe of all important growth numbers Arguments initial_seaweed : The initial amount of seaweed in t initial_area_built : The initial area built in km\u00b2 initial_area_used : The initial area used in km\u00b2 new_module_area_per_day : The area built per day in km\u00b2 min_density : The minimum density in t/km\u00b2 max_density : The maximum density in t/km\u00b2 max_area : The maximum area in km\u00b2 optimal_growth_rate : The optimal growth rate in % growth_rate_fraction : The fraction of the growth rate (can either be scalar or list) initial_lag : The initial lag in days percent_usable_for_growth : The percent usable for growth in % days_to_run : The number of days to run Returns A dataframe with all important growth numbers","title":".seaweed_growth"},{"location":"modules/src/scaleup_model/#determine_average_productivity","text":"source .determine_average_productivity( growth_rate_fraction, days_to_run, percent_usable_for_growth, optimal_growth_rate ) Let the model run for one km\u00b2 to determine the productivity per area and day and the harvest intervall Arguments growth_rate_fraction : float or list of the growth rate of seaweed days_to_run : int, number of days to run the model percent_usable_for_growth : float, the percentage of the module area that can be used for growth optimal_growth_rate : float, the optimal growth rate of the seaweed Returns productivity : float, the average productivity per km\u00b2 and day","title":".determine_average_productivity"},{"location":"modules/src/scaleup_model/#self_shading","text":"source .self_shading( density ) Calculates how much the growth rate is reduced due to self shading. Based on the publication: Lapointe, B. E., & Ryther, J. H. (1978). Some aspects of the growth and yield of Gracilaria tikvahiae in culture. Aquaculture, 15(3), 185-193. https://doi.org/10.1016/0044-8486(78)90030-3 Arguments density : the seaweed density Returns the growth rate fraction","title":"self_shading"},{"location":"modules/src/scaleup_model/#calculate_seaweed_need","text":"source .calculate_seaweed_need( global_pop, calories_per_person_per_day, food_waste, calories_per_t_seaweed_wet, seaweed_limit ) Calculates the amount of seaweed needed to feed the population based on global population and the amount of seaweed needed per person limited by the iodine content of the seaweed Arguments global_pop (int) : Global population calories_per_person_per_day (int) : Calories needed per person per day food_waste (float) : Fraction of food wasted calories_per_kg_seaweed (int) : Calories per t of seaweed seaweed_limit (float) : how large a fraction of the food can be substituted by seaweed Returns float : amount of seaweed needed to feed the population","title":"calculate_seaweed_need"},{"location":"modules/src/scaleup_model/#seaweed_farm_area_per_day","text":"source .seaweed_farm_area_per_day( day ) Estimates the area that can be built per day based on how many days have passed. This is a rough estimate based on: https://github.com/allfed/Seaweed-Scaleup-Model/blob/main/scripts/Logistic%20Growth.ipynb Arguments day : the day Returns the area that can be built per day","title":"seaweed_farm_area_per_day"},{"location":"modules/src/scaleup_model/#logistic_curve","text":"source .logistic_curve( x, max_L, k, x0, off ) Describes a logistic growth curve Arguments x : value to calculate max_L : maximum value of the curve k : the logistic growth rate x0 : the sigmoid's midpoint off : offset to 0 Returns float: y value corresponding to x","title":"logistic_curve"},{"location":"modules/src/scaleup_model/#run_model","text":"source .run_model( optimal_growth_rate, days_to_run, global_pop, calories_per_person_per_day, harvest_loss, food_waste, calories_per_t_seaweed_wet, food_limit, feed_limit, biofuel_limit, percent_usable_for_growth, scenarios, location, number_of_clusters ) Run the model Arguments optimal_growth_rate (float) : the optimal growth rate days_to_run (int) : the number of days to run the model global_pop (int) : Global population calories_per_person_per_day (int) : Calories needed per person per day harvest_loss (float) : Fraction of harvest lost food_waste (float) : Fraction of food wasted calories_per_kg_seaweed (int) : Calories per t of seaweed food_limit (float) : how large a fraction of the food can be substituted by seaweed feed_limit (float) : how large a fraction of the feed can be substituted by seaweed biofuel_limit (float) : how large a fraction of the biofuel can be substituted by seaweed percent_usable_for_growth (float) : how much of the harvest is usable for growth scenarios (list) : list of scenarios to run location (str) : location on the globe number_of_clusters (int) : number of clusters Returns None","title":"run_model"}]}